openapi: 3.0.3
info:
  title: Library API
  version: 1.1.0
  description: STD22098
servers:
  - url: https://petstore.swagger.io/?url=https://raw.githubusercontent.com/Tombosoa/library-management/oas-td2-std22098/docs/api.yml
tags:
  - name: Books
  - name: Author
paths:
  /books:
    get:
      tags:
        - Books
      summary: Get all books
      description: The returned books are ordered by updated datetime.
      operationId: getBooks
      parameters:
        - in: query
          name: bookName
          description: Filter return books by given name
          required: false
          schema:
            type: string
        - in: query
          name: releaseDateMin
          required: false
          schema:
            type: string
          description: if 'releaseDateMax' is not given, 'releaseDateMin' is ignored
        - in: query
          name: releaseDateMax
          required: false
          schema:
            type: string 
          description:  if 'releaseDateMin' is not given, 'releaseDateMax' is ignored
        - in: query
          name: page
          description: Page number for pagination
          required: false
          schema:
            type: integer
            default: 1
        - in: query
          name: pageSize
          description: Number of books per page for pagination
          required: false
          schema:
            type: integer
            default: 50
      responses:
        '200':
          description: The list of filtered books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
      
    put:
      tags: 
        - Books
      summary: Create or update a list of books
      operationId: crupdateBooks
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/crupdateBook'
      responses:
        '200':
          description: The list of created or updated books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'

  /books/{bookId}/authors/{authorId}:
    put: 
      tags:
        - Author
      summary: update by book's id and author's id
      parameters:
        - in: query
          name: bookId
          required: true
          schema:
            type: integer
        - in: query
          name: authorId
          required: true
          schema:
            type: string
      responses:
        '200':
          description: data has been updated
          content:
            application/json:
              schema: 
                type: array
                items:
                  $ref: '#/components/schemas/UpdateBookAuthor'
  /books/authors:
    put:
      tags:
        - Author
      summary: associate
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/UpdateBookAuthor'
      responses:
        '200':
          description: author has been updated
          content:
            application/json:
              schema: 
                type: array
                items:
                  $ref: '#/components/schemas/UpdateBookAuthor'
  /authors:
    get:
      tags:
        - Author
      summary: get book's author
      operationId: getAuthor
      parameters:
        - in: query
          name: authorBook
          description: Filter author by name
          required: false
          schema: 
            type: string
      responses:
        '200':
          description: List of author
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Author'
  
    put:
      tags:
        - Author
      summary: Create or update a list of author
      operationId: crupdateAuthor
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Author'
      responses:
        '200':
          description: The list of created or updated author
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Author'
    delete:
      tags:
        - Author
      summary: Delete all authors
      operationId: deleteAllAuthors
      responses:
        '200':
          description: All authors are deleted
  /authors/{aId}:
    delete:
      tags:
        - Author
      summary: delete an author
      operationId: deleteAuthor
      parameters:
        - in: query
          name: aId
          description: delete author by id
          required: true
          schema: 
            type: string
      responses:
        '200':
          description: author is deleted
  /authors/page/{page}/size/{size}:
    get:
      tags:
        - Author
      summary: get author per page
      operationId: getAuthorPerPage
      parameters:
        - in: query
          name: size
          required: false
          description: if "size" is not given, it will be 1 by default
          schema: 
            type: integer
        - in: query
          name: page
          required: false
          description: if "page" is not given, it will be 1 by default
          schema: 
            type: integer
      responses:
        '200':
          description: list of authors
          content:
            application/json:
              schema: 
                type: array
                items:
                  $ref: '#/components/schemas/Author'
components:
  schemas:
    Book:
      type: object
      properties:
        author:
          $ref: "#/components/schemas/Author"
        allOf:
          $ref: '#/components/schemas/crupdateBook'
    Author:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        sex: 
          $ref: "#/components/schemas/Sex"
    Sex:
      type: string
      enum: 
        - M
        - F
    crupdateBook:
      type: object
      properties:
        id:
          type: integer
        bookName:
          type: string
        pageNumbers: 
          type: integer
        topic: 
          type: string
          enum:
            - ROMANCE
            - COMEDY
            - OTHER
        releaseDate: 
          type: string
          format: date
    UpdateBookAuthor:
      type: object
      properties:
        bookId:
          type: integer
        authorId:
          type: string
      required:
        - bookId
        - authorId