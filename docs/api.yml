openapi: 3.0.3
info:
  title: Library API
  version: 1.3.0
  description: STD22098
servers:
  - url: https://petstore.swagger.io/?url=https://raw.githubusercontent.com/Tombosoa/library-management/oas-td3-std22098/docs/api.yml
tags:
  - name: Books
  - name: Author
  - name: Visitor
paths:
  /books:
    get:
      tags:
        - Books
      summary: Get all books
      description: The returned books are ordered by updated datetime.
      operationId: getBooks
      parameters:
        - in: query
          name: bookName
          description: Filter return books by given name
          required: false
          schema:
            type: string
        - in: query
          name: releaseDateMin
          required: false
          schema:
            type: string
          description: if 'releaseDateMax' is not given, 'releaseDateMin' is ignored
        - in: query
          name: releaseDateMax
          required: false
          schema:
            type: string 
          description:  if 'releaseDateMin' is not given, 'releaseDateMax' is ignored
        - in: query
          name: queryPagination
          $ref: '#/components/parameters/queryPagination'
      security:
        - OAuth2: []
      responses:
        '200':
          $ref: '#/components/responses/BookList200'
      
    put:
      tags: 
        - Books
      summary: Create or update a list of books
      operationId: crupdateBooks
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/crupdateBook'
      security:
        - OAuth2: [admin]
      responses:
        '200':
          description: The list of created or updated books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
  /books/import:
    post:
      tags:
        - Books
      summary: create an import book
      operationId: bookImport
      requestBody:
        content:
          application/json:
            schema: 
              type: array
              items:
                $ref: '#/components/schemas/importBookJSON'
          application/vnd.openxmlformats-officedocument.spreadsheethtml.sheet:
              schema: 
                type: array
                items:
                  $ref: '#/components/schemas/importBookEXCEL'
      security:
        - OAuth2: [admin]
      responses:
        '200':
          description: The list of books imported
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Book"
        '400':
          description: error
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/responses/properties/400"
        '403':
          description: error
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/responses/properties/403"
        '500':
          description: error
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/responses/properties/500"
    get:
      tags:
        - Books 
      summary: get list of book
      operationId: getBook
      parameters:
        - in: path
          name: size
          required: true
          description: get an book by page and size
          schema:
            $ref: '#/components/parameters/pathPagination/schema/properties/size' 
        - in: path
          name: page
          required: true
          description: get an book by page and size
          schema:
            $ref: '#/components/parameters/pathPagination/schema/properties/page' 
      security:
        - OAuth2: [admin]
      responses:
        '200':
          description: The list of author imported
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Book"
        '400':
          description: error
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/responses/properties/400"
        '403':
          description: error
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/responses/properties/403"
        '500':
          description: error
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/responses/properties/500"

  /author/import:
    post:
      tags:
        - Author
      summary: create an import author
      operationId: bookImport
      requestBody:
        content:
          application/json:
            schema: 
              type: array
              items:
                $ref: '#/components/schemas/importAuthorJSON'
          application/vnd.openxmlformats-officedocument.spreadsheethtml.sheet:
              schema: 
                type: array
                items:
                  $ref: '#/components/schemas/importAuthorEXCEL'
      security:
        - OAuth2: [admin]
      responses:
        '200':
          description: The list of author imported
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Author"
        '400':
          description: error
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/responses/properties/400"
        '403':
          description: error
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/responses/properties/403"
        '500':
          description: error
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/responses/properties/500"


  /books/{bookId}/authors/{authorId}:
    put: 
      tags:
        - Author
      summary: update by book's id and author's id
      parameters:
        - in: query
          name: bookId
          required: true
          schema:
            type: integer
        - in: query
          name: authorId
          required: true
          schema:
            type: string
      responses:
        '200':
          description: data has been updated
          content:
            application/json:
              schema: 
                type: array
                items:
                  $ref: '#/components/schemas/UpdateBookAuthor'
  /books/authors:
    put:
      tags:
        - Author
      summary: associate
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/UpdateBookAuthor'
      responses:
        '200':
          description: author has been updated
          content:
            application/json:
              schema: 
                type: array
                items:
                  $ref: '#/components/schemas/UpdateBookAuthor'
  /authors:
    get:
      tags:
        - Author
      summary: get book's author
      operationId: getAuthor
      parameters:
        - in: query
          name: authorBook
          description: Filter author by name
          required: false
          schema: 
            type: string
      security:
        - OAuth2: []
      responses:
        '200':
          description: List of author
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Author'
  
    put:
      tags:
        - Author
      summary: Create or update a list of author
      operationId: crupdateAuthor
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Author'
      security:
        - OAuth2: [admin]
      responses:
        '200':
          description: The list of created or updated author
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Author'
    delete:
      tags:
        - Author
      summary: Delete all authors
      operationId: deleteAllAuthors
      responses:
        '200':
          description: All authors are deleted
      security:
        - OAuth2: [admin]
  /authors/{aId}:
    delete:
      tags:
        - Author
      summary: delete an author
      operationId: deleteAuthor
      parameters:
        - in: query
          name: aId
          description: delete author by id
          required: true
          schema: 
            type: string
      security:
        - OAuth2: [admin]
      responses:
        '200':
          description: author is deleted
  /authors/page/{page}/size/{size}:
    get:
      tags:
        - Author
      summary: get author per page
      operationId: getAuthorPerPage
      parameters:
        - in: path
          name: size
          required: true
          description: get an author by page and size
          schema:
            $ref: '#/components/parameters/pathPagination/schema/properties/size' 
        - in: path
          name: page
          required: true
          description: get an author by page and size
          schema:
            $ref: '#/components/parameters/pathPagination/schema/properties/page' 
      security:
        - OAuth2: []
      responses:
        '200':
          description: list of authors
          content:
            application/json:
              schema: 
                type: array
                items:
                  $ref: '#/components/schemas/Author'
 
  /visitor/{action}: 
    put:
      tags:
        - Visitor
      summary: make an action
      operationId: visitorAction
      parameters:
        - in: path
          name: action
          required: true
          description: modify or create a visitor action
          schema: 
            type: string
            enum:
              - borrow 
              - giveBack 
      security:
        - OAuth2: [admin]
      responses:
        '200':
          description: The list of created or updated author
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'

  /visitor/{idVisitor}/{action}:
    get:
      tags:
        - Visitor
      summary: get visitor emprunt per page
      operationId: getVisitorEmpruntPerPage
      parameters:
        - in: path
          name: size
          required: true
          description: get an visitor by page and size
          schema:
            $ref: '#/components/parameters/pathPagination/schema/properties/size' 
        - in: path
          name: page
          required: true
          description: get an visitor by page and size
          schema:
            $ref: '#/components/parameters/pathPagination/schema/properties/page' 
        - in: path
          name: idVisitor
          required: true
          description: get an visitor's book
          schema:
            $ref: '#/components/schemas/Visitor/properties/id' 
        - in: query
          name: firstDate
          description: first date, if it is not given last date will be null
          required: false
          schema:
            type: string
            format: date
        - in: query
          name: lastDate
          description: last date, if it is not given first date will be null
          required: false
          schema:
            type: string
            format: date
        - in: path
          name: action
          required: true
          description: modify or create a visitor action
          schema: 
            type: string
            enum:
              - borrow 
              - giveBack 
      security:
        - OAuth2: [admin]
      responses:
        '200':
          description: list of emprunt of visitor's book
          content:
            application/json:
              schema: 
                type: array
                items:
                  $ref: '#/components/schemas/Book'
        '400':
          description: error
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/responses/properties/400"
        '403':
          description: error
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/responses/properties/403"
        '500':
          description: error
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/responses/properties/500"

components:
  securitySchemes:
      OAuth2:
        type: oauth2
        flows:
          implicit:
            authorizationUrl: https://example.com/oauth/authorize
            scopes:
              admin: Administrator access 
              visitor: visitor access
  schemas:
    Book:
      type: object
      properties:
        author:
          $ref: "#/components/schemas/Author"
        allOf:
          $ref: '#/components/schemas/crupdateBook'
        status:
          type: string
          enum:
            - available
            - not available
    Author:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        sex: 
          $ref: "#/components/schemas/Sex"
    Visitor:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        reference:
          type: string
    Sex:
      type: string
      enum: 
        - M
        - F
    crupdateBook:
      type: object
      properties:
        id:
          type: integer
        bookName:
          type: string
        pageNumbers: 
          type: integer
        topic: 
          type: string
          enum:
            - ROMANCE
            - COMEDY
            - OTHER
        releaseDate: 
          type: string
          format: date
    UpdateBookAuthor:
      type: object
      properties:
        bookId:
          type: integer
        authorId:
          type: string
      required:
        - bookId
        - authorId
    Exception:
      type: object
      properties:
        status:
          type: object
          properties:
            status_code:
              type: string
              example: 200
            message:
              type: string
              example: OK
        body: 
          type: object

    ResponseSuccessfully:
      allOf:
        - $ref: '#/components/schemas/Exception'
    
    BadRequest:
      allOf:
        - $ref: '#/components/schemas/Exception'
      example:
        status:
          status_code: 400
          message: BAD REQUEST 
        body: { }

    
    Forbidden:
      allOf:
        - $ref: '#/components/schemas/Exception'
      example:
        status:
          status_code: 400
          message: FORBIDDEN 
        body: { }

    ServerError:
      allOf:
        - $ref: '#/components/schemas/Exception'
      example:
        status: 
          status_code: 500
          message: SERVOR ERROR 
        body: { }

    BookListBody:
      allOf:
        - $ref: '#/components/schemas/Exception'
        - properties:
            body:
              type: array
              items: 
                $ref: '#/components/schemas/Book'

    importAuthorJSON:
      type: object
      properties:
        authorName:
          type: string
        sex:
          $ref: '#/components/schemas/Sex'
    importBookJSON:
      type: object
      properties:
        allOf:
          $ref: '#/components/schemas/crupdateBook'
    importAuthorEXCEL:
      type: object
      properties:
        authorName:
          type: string
        sex:
          $ref: '#/components/schemas/Sex'
    importBookEXCEL:
      type: object
      properties:
        allOf:
          $ref: '#/components/schemas/crupdateBook'


    responses:
        type: object
        properties:
          200:
            type: object
            allOf:
              - $ref: '#/components/schemas/ResponseSuccessfully'
          400:
            type: object
            allOf:
              - $ref: '#/components/schemas/BadRequest'
          403:
            type: object
            allOf:
              - $ref: '#/components/schemas/Forbidden'
          500:
            type: object
            allOf:
              - $ref: '#/components/schemas/ServerError'

  parameters:
    queryPagination:
      name: queryPagination
      in: query
      description: for query pagination
      required: false
      schema:
        type: object
        properties:
          page:
            type: integer
            default: 1
          size:
            type: integer
            default: 50
    pathPagination:
      in: path
      name: pathPagination
      description: on the path parameter
      required: true
      schema: 
        type: object
        properties:
          page:
            type: integer
            default: 1
          size:
            type: integer
            default: 50
  responses:
      BookList200:
        description: List of books
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BookListBody'
    