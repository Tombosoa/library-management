openapi: 3.1.0
info:
  title: Library API
  version: 1.0.0
  description: STD22098
servers:
  - url: https://petstore.swagger.io/?url=https://raw.githubusercontent.com/Tombosoa/library-management/TD1/docs/api.yml
paths:
  /books:
    get:
      summary: Get all books
      description: The returned books are ordered by updated datetime.
      operationId: getBooks
      parameters:
        - in: query
          name: bookName
          description: Filter return books by given name
          required: false
          schema:
            type: string
        - in: query
          name: byIntervals
          required: false
          schema:
            type: string
          description: Filter books by intervals of dates of the releaseDate (YYYY-MM-DD,YYYY-MM-DD)
        #TODO3: add parameter to filter books by intervals of dates of the releaseDate
      responses:
        200:
          description: The list of filtered books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
    put:
      summary: Create or update a list of books
      operationId: crupdateBooks
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Book'
      responses:
        200:
          description: The list of created or updated books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
  /authors:
    get:
      summary: get book's author
      operationId: getAuthor
      parameters:
        - in: query
          name: authorBook
          description: Filter author by name
          required: false
          schema: 
            type: string
      responses:
        "200":
          description: List of author
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/author'
    put:
      summary: Create or update a list of author
      operationId: crupdateAuthor
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/author'
      responses:
        200:
          description: The list of created or updated author
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/author'
    delete:
      summary: delete an author
      operationId: deleteAuthor
      parameters:
        - in: query
          name: authorBook
          description: delete author by id
          required: true
          schema: 
            type: string
      responses:
        "200":
          description: author is deleted
  #TODO2: complete GET (can be filtered by name) - PUT - DELETE
components:
  schemas:
    Book:
      type: object
      properties:
        author:
          #TODO1: set it as a component with properties : id, name, sex (M or F)
          $ref: "#/components/schemas/author"
          type: string
      allOf:
        - $ref: "#/components/schemas/crupdateBook"
    author:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        sex: 
          $ref: "#/components/schemas/Sex"
    Sex:
      type: string
      enum: 
        - M
        - F
    crupdateBook:
      type: object
      properties:
        id:
          type: integer
        bookName:
          type: string
        pageNumbers: 
          type: integer
        topic: 
          type: string
          enum:
            - ROMANCE
            - COMEDY
            - OTHER
        releaseDate: 
          type: string
          format: date